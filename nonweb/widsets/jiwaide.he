// $Id$

//FIXME XML-based rather than "programmatic" UI Layout

class
{

// BEGIN consts

  const String storeUsername  = "login.username";
  const String storePassword  = "login.password";
  const String storeTortoise  = "mode.tortoise";
  const String storeCamera    = "mode.camera";

  const int    CMD_OPEN     = 1;
  const int    CMD_BACK     = 2;
  const int    CMD_CANCEL   = 3;
  const int    CMD_SHOW     = 4;
  const int    CMD_HELP     = 5;
  const int    CMD_RELOAD   = 6;
  const int    CMD_LOGOUT   = 7;
  const int    CMD_UPDATE   = 8;
  const int    CMD_LOGIN    = 9;
  const int    CMD_REPLY    = 10;
  const int    CMD_DRMSG    = 11;
  const int    CMD_READALL  = 12;
  const int    CMD_WANDER   = 13;
  const int    CMD_SETTING  = 14;
  const int    CMD_REGISTER = 15;
  const int    CMD_FOLLOW   = 16;
  const int    CMD_UNFOLLOW = 16;
  const int    CMD_CAPTURE  = 17;
  const int    CMD_LINGO    = 18;
  const int    CMD_BLOG     = 19;
  const int    CMD_SAVE     = 20;

  const int    MAX_CMD_ID   = 24;

  const String STATUS_UNVIEWED= "N";
  const String STATUS_VIEWED  = "Y";

  const int    STATUS_COUNTS  = 20;

// END consts

// BEGIN const strings

  const String FacilityBlog = "jiwaide_blog";
  const String FacilityPub  = "public_timeline";
  const String FacilityUser = "user_timeline";
  const String FacilityFri  = "friends_timeline";
  const String FacilityDr   = "direct_messages";
  const String FacilityFriends  = "friends";
  const String FacilityFeatures = "featured";

  const String loginUrl = "api.jiwai.de/account/verify_credentials.json";
  const String logoutUrl= "api.jiwai.de/account/end_session.json";
  const String updateUrl= "api.jiwai.de/statuses/update.json";
  const String mmsUrl   = "api.jiwai.de/extend/upmms.json";
  const String lingoUrl = "api.jiwai.de/extend/lingo.xml";
  const String drmsgUrl = "api.jiwai.de/direct_messages/new.json";
  const String signupUrl= "http://api.jiwai.de/account/new.json";
  const String signupKey= "0e4a4c24954f22cecea6b06b33efbfd7";

// END const strings
  
// BEGIN menu

  MenuItem  MenuHelp    = new MenuItem(CMD_HELP,    @CmdHelp);
  MenuItem  MenuReload  = new MenuItem(CMD_RELOAD,  @CmdReload);
  MenuItem  MenuLogout  = new MenuItem(CMD_LOGOUT,  @CmdLogout);
  MenuItem  MenuLogin   = new MenuItem(CMD_LOGIN,   @CmdLogin);
  MenuItem  MenuBack    = new MenuItem(CMD_BACK,    @CmdBack);
  MenuItem  MenuSave    = new MenuItem(CMD_SAVE,    @CmdSave);
  MenuItem  MenuCancel  = new MenuItem(CMD_CANCEL,  @CmdCancel);
  MenuItem  MenuUpdate  = new MenuItem(CMD_UPDATE,  @CmdUpdateLite);
  MenuItem  MenuReply   = new MenuItem(CMD_REPLY,   @CmdReply);
  MenuItem  MenuFollow  = new MenuItem(CMD_FOLLOW,  @CmdFollow);
  MenuItem  MenuUnFollow= new MenuItem(CMD_UNFOLLOW,@CmdUnFollow);
  MenuItem  MenuDrmsg   = new MenuItem(CMD_DRMSG,   @CmdDrmsg);
  MenuItem  MenuOptions = new MenuItem(OPEN_MENU,   @CmdMenu);
  MenuItem  MenuReadall = new MenuItem(CMD_READALL, @CmdReadall);
  MenuItem  MenuSetting = new MenuItem(CMD_SETTING, @CmdSetting);
  MenuItem  MenuRegister= new MenuItem(CMD_REGISTER,@CmdRegister);
  MenuItem  MenuCapture = new MenuItem(CMD_CAPTURE ,@CmdCapture);
  MenuItem  MenuLingo   = new MenuItem(CMD_LINGO,   @CmdLingo);

  Menu MENU = new Menu().add(OPEN_MENU, @CmdMenu);

// END menu

// BEGIN Variables

  String username;
  String password;

  int progressTotal;
  int progressCurrent;

  boolean anonymousMode = true;
  boolean tortoiseMode  = true;
  boolean hasCamera     = false;
  boolean cameraHighMode= false;

  Component tobeFocused;
  Prompt prompt;
  Camera camera;

  Shell timelineListShell;
  Shell tempShell;
  Shell exclusiveShell;

  Value lastFocused = [
    "timeline"  => FacilityPub,
    "status"    => ""
  ];

// facility => Value
  void initValue() {
    timelineList  = [
      FacilityBlog  => [],
      FacilityPub   => [],
      FacilityUser  => [],
      FacilityFri   => [],
      FacilityDr    => [],
      FacilityFriends   => [],
      FacilityFeatures  => []
    ];

    timelineViewed= [
      FacilityBlog  => STATUS_UNVIEWED,
      FacilityPub   => STATUS_UNVIEWED,
      FacilityUser  => STATUS_UNVIEWED,
      FacilityFri   => STATUS_UNVIEWED,
      FacilityDr    => STATUS_UNVIEWED,
      FacilityFriends   => STATUS_UNVIEWED,
      FacilityFeatures  => STATUS_UNVIEWED
    ];
  }

  Value timelineList  = [
    FacilityBlog  => [],
    FacilityPub   => [],
    FacilityUser  => [],
    FacilityFri   => [],
    FacilityDr    => [],
    FacilityFriends  => [],
    FacilityFeatures => []
  ];

  Value timelineViewed= [
    FacilityBlog  => STATUS_UNVIEWED,
    FacilityPub   => STATUS_UNVIEWED,
    FacilityUser  => STATUS_UNVIEWED,
    FacilityFri   => STATUS_UNVIEWED,
    FacilityDr    => STATUS_UNVIEWED,
    FacilityFriends   => STATUS_UNVIEWED,
    FacilityFeatures  => STATUS_UNVIEWED
  ];

// END Variables

// Create Menus

  void createPreLoginMenu() {
    MENU = new Menu().add(CMD_LOGIN, @CmdLogin);
  }

  void createUpdateMenu() {
    MENU = new Menu().add(CMD_UPDATE, @CmdUpdateLite);
  }

  void createTimelineListMenu() {
    MENU = new Menu()
      .add(CMD_RELOAD, "* " + @CmdReload)
      .add(CMD_READALL,"# " + @CmdReadall)
      .add(CMD_HELP ,  "1 " + @CmdHelp)
      .add(CMD_SETTING,"3 " + @CmdSetting)
      .add(CMD_CAPTURE,"9 " + @CmdCapture)
      .add(CMD_LOGOUT, @CmdLogout);
  }

  void createTimelineViewMenu () {
    MENU = new Menu()
      .add(CMD_RELOAD, "* " + @CmdReload)
      .add(CMD_READALL,"# " + @CmdReadall)
      .add(CMD_HELP ,  "1 " + @CmdHelp)
      .add(CMD_CAPTURE,"9 " + @CmdCapture);
  }

// END createMenus

// BEGIN createViews

  // Long Long ago, there's a king ...
  // After all, he's so dead
  Shell createTimelineList() {
    createTimelineListMenu();
    Text updateText = createUpdateText(@CmdUpdate);
    updateText.setAction(CMD_UPDATE);
    final Flow flow = getTimelineListFlow();
    final Input updateInput = new Input(getStyle("default"), @HintUpdate, "", ANY);
    flow.add(updateInput);
    final Shell shell = new Shell(flow);
    shell.setFocused(tobeFocused);
    shell.setStyle(getStyle("maxi"));
    shell.setKeyHandler(myKeyHandler);
    shell.setSoftKeyHandler(mySoftKeyHandler);
    shell.setActionHandler(myActionHandler);

    Flow getTimelineListFlow () {
      Value data = [
        ["name"    => @TimelinePub,
        "fname"    => FacilityPub,
        "viewed"   => STATUS_UNVIEWED
          ],
        ["name"    => @TimelineUser,
        "fname"    => FacilityUser, 
        "viewed"   => STATUS_UNVIEWED
          ],
        ["name"    => @TimelineFri,
        "fname"    => FacilityFri, 
        "viewed"   => STATUS_UNVIEWED
          ],
        ["name"    => @TimelineDr,
        "fname"    => FacilityDr,
        "viewed"   => STATUS_UNVIEWED
          ],
        ["name"    => @ListFriends,
        "fname"    => FacilityFriends,
        "viewed"   => STATUS_UNVIEWED
          ],
        ["name"    => @ListFeatures,
        "fname"    => FacilityFeatures,
        "viewed"   => STATUS_UNVIEWED
          ],
        ["name"    => @TimelineBlog,
        "fname"    => FacilityBlog,
        "viewed"   => STATUS_UNVIEWED
          ]
      ];

      Flow content = new Flow(getStyle("default"));
      content.setPreferredSize(-100, -100);
      content.add(createHeaderText(@TitleTimelineList));

      content.add(updateText);

      tobeFocused = null;
      foreach (Value timeline : data)
      {
        Flow itemFlow = new Flow(getStyle("timeline.list"));
        itemFlow.setFlags(VISIBLE|FOCUSABLE|LINEFEED);
        itemFlow.setPreferredWidth(-100);
        itemFlow.setData(timeline);
        itemFlow.setAction(CMD_SHOW);

        {
          Flow textFlow = new Flow(getStyle("timeline.list"));
          textFlow.setPreferredWidth(-100);
          textFlow.setFlags(VISIBLE);

          final Style labelStyle = (String(timelineViewed[timeline.fname]).equals(STATUS_UNVIEWED))
            ? getStyle("timeline.unread")
            : getStyle("timeline.read");
          Label name = new Label(labelStyle, timeline.name
              + "("
              + getUnviewedSize(timeline.fname)
              + "/"
              + timelineList[timeline.fname].size()
              + ")"
              );
          name.setPreferredWidth(-75);
          name.setFlags(VISIBLE|LINEFEED);
          textFlow.add(name);
          itemFlow.add(textFlow);
          if (String(timeline.fname).equals(String(lastFocused.timeline))) {
            tobeFocused = itemFlow;
          }
        }

        content.add(itemFlow);
      }

      return content;
    }

    boolean myKeyHandler(Component source, int op, int code)
    {
      if (code == '*') {
        tempShell = shell;
        bulkFetch();
      } else if (code == '#') {
        bulkReadall();
        animatePopShell(shell);
        animatePushShell(createTimelineList());
      } else if (code == '0' ) {
        updateInput.edit(doUpdateStatus);
      } else if (code == '9') {
        if (hasCamera) {
          animatePushShell(createCaptureView());
        } else {
          alertError(@InfoNoCamera);
        }
      } else if (code == '7') {
        animatePushShell(createConsoleView());
      } else if (code == '1') {
        animatePushShell(createHelpView("main"));
      } else if (code == '3') {
        animatePushShell(createSettingView());
      }
      return false;
    }
  
    MenuItem mySoftKeyHandler(final Shell shell, final Component focused, final int key)
    {
      if (key == SOFTKEY_BACK) {
        return MenuBack;
      } else if (key == SOFTKEY_OK) {
        return MenuOptions;
      }
      return null;
    }

    void myActionHandler(final Shell shell, final Component source, final int action) 
    {
      if (action == CMD_BACK) {
        animatePopShell(shell);
      } else if (action == CMD_SHOW) {
        animatePopShell(shell); // force reload while return from child
        Value sTimeline = Value(source.getData());
        lastFocused.timeline = sTimeline.fname;
        timelineViewed[sTimeline.fname] = [];
        animatePushShell(createTimelineView(sTimeline.fname, sTimeline.name));
      } else if (action == CMD_RELOAD) {
        tempShell = shell;
        bulkFetch();
      } else if (action == CMD_HELP ) {
        animatePushShell(createHelpView("main"));
      } else if (action == CMD_LOGOUT) {
        Value arg = [
          "url"   => createAuthedUrl(logoutUrl)
        ];
        call(shell, "logout", "get", arg, logoutok, logoutnok);
      } else if (action == CMD_UPDATE) {
        updateInput.edit(doUpdateStatus);
      } else if (action == CMD_READALL) {
        bulkReadall();
        animatePopShell(shell);
        animatePushShell(createTimelineList());
      } else if (action == CMD_SETTING) {
        animatePushShell(createSettingView());
      } else if (action == CMD_CAPTURE) {
        if (hasCamera) {
          animatePushShell(createCaptureView());
        } else {
          alertError(@InfoNoCamera);
        }
      }
    }

    return shell;
  }

  void pushExclusiveView(String info) {
    prompt = new Prompt(null, info, null, MenuCancel);
    prompt.push();
  }

  Shell createConsoleView() {
    Flow flow = new Flow(getStyle("popup"));
    flow.setPreferredSize(-100, -100);
    flow.add(createHeaderText(""));

    Text standardOut = new Text(getStyle("popup"), "");
    standardOut.setPreferredWidth(-100);
    standardOut.setFlags(VISIBLE|LINEFEED|WRAP);
    standardOut.appendText("\n" + @HelpMain + "\n\n");
    flow.add(standardOut);

    final Input standardIn =  new Input(getStyle("default"), @HintUpdate, "help", ANY);
    flow.add(standardIn);

    final Shell shell = new Shell(new Scrollable(getStyle("popup"), flow));
    shell.setStyle(getStyle("popup"));
    shell.setSoftKeyHandler(mySoftKeyHandler);
    shell.setActionHandler(myActionHandler);

    MenuItem mySoftKeyHandler(Shell shell, Component focused, int key)
    {
      if (key == SOFTKEY_OK) {
        return MenuLingo;
      } else if (key == SOFTKEY_BACK) {
        return MenuBack;
      }
      return null;
    }

    void myActionHandler(Shell shell, Component source, int action)
    {
      if (action == CMD_BACK) {
        animatePopShell(shell);
      } else if (action == CMD_LINGO) {
        standardIn.edit(doRobotLingo);
      }
    }

    void doRobotLingo(final Shell shell, final Component source, final int action) 
    {
      if (action == ITEM_CANCEL) { return; }
      String lingo = standardIn.getText().toLowerCase();
      final Value params = [
        "status"=> lingo
        ];
      Value arg = [
        "url"   => createAuthedUrl(lingoUrl),
        "params"=> params
          ];
      standardOut.appendText(username + "@JiWai >");
      standardOut.appendText(lingo);
      if (myLingoTrap(lingo)) {
        call(shell, "lingo", "post", arg, lingook, lingonok);
      }
    }

    void lingook(Object state, Value ret)
    {
      String replyLingo = ret;
      standardOut.appendText(replyLingo);
      standardOut.appendText("\n");
    }

    void lingonok(Object state, String error)
    {
      alertError(@InfoUpdateFail +error);
    }

    boolean myLingoTrap(String lingo)
    {
      if (lingo.equals("clear")) {
        standardOut.setText("");
        return false;
      } else if (0 == lingo.indexOf("quit", 0)
          || 0 == lingo.indexOf("exit", 0)
          || 0 == lingo.indexOf("bye", 0)) {
        animatePopShell(shell);
        return false;
      } else if (lingo.equals("help") || lingo.equals("?")) {
        standardOut.appendText("\n" + @HelpFuncLingo+ "\n");
        return false;
      } else if (lingo.equals("tips")) {
        standardOut.appendText("\n" + @HelpFuncLingoTips + "\n");
        return false;
      }
      return true;
    }
    
    return shell;
  }

  Shell createCaptureView() {
    if (!hasCamera) {
      alertError(@InfoNoCamera);
      return null;
    }
    List encTypes = new List();
    if (cameraHighMode) {
      encTypes.add("encoding=jpeg&width=640&height=480")
        .add("encoding=jpeg");
    } else {
      encTypes.add("encoding=jpeg&width=320&height=240")
        .add("encoding=jpeg");
    }

    boolean hasCaptured = false;
    Flow flow = new Flow(getStyle("block"));
    flow.setPreferredSize(-100, -100);

    camera = new Camera(getStyle("block"));
    if (!camera.isAvailable()) {
      return null;
    }
    camera.setPreferredWidth(-100);
    camera.setFlags(VISIBLE);
    flow.add(camera);

    Input mmsDesc = new Input(getStyle("block"), @HintUpdate, "", ANY);
    flow.add(mmsDesc);

    final Shell shell = new Shell(flow);
    shell.setStyle(getStyle("block"));
    shell.setSoftKeyHandler(mySoftKeyHandler);
    shell.setActionHandler(myActionHandler);

    ByteArray imageData = null;

    MenuItem mySoftKeyHandler(Shell shell, Component focused, int key)
    {
      if (key == SOFTKEY_OK) {
        return hasCaptured ? MenuUpdate : MenuCapture;
      } else if (key == SOFTKEY_BACK) {
        return MenuBack;
      }
      return null;
    }

    void myActionHandler(Shell shell, Component source, int action)
    {
      if (action == CMD_BACK) {
        if (null != camera) {
          camera.close();
          camera = null;
        }
        imageData = null;
        animatePopShell(shell);
      } else if (action == CMD_CAPTURE) {
        flow.clear();
        imageData = camera.capture(encTypes);
        if (imageData == null) {
          alertError("Image capturing failed");
        }
        camera.close();
        camera = null;
        hasCaptured = true;
        shell.updateMenu();

        Image image = getImage(imageData);
        Picture picture = new Picture(getStyle("mini"), image);
        picture.setPreferredSize(-100, -100);
        flow.add(picture);

        flushScreen(true);
        shell.repaint(false);
      } else if (action == CMD_UPDATE) {
        mmsDesc.edit(doUpdateMms);
        hasCaptured = true;
      }
    }

    void doUpdateMms(final Shell shell, final Component source, final int action) 
    {
      if (action == ITEM_CANCEL) return;
      final Value params = [
        "status"    => mmsDesc.getText(),
        "mms_file"  => ["image/jpeg", imageData],
        "idPartner" => "10038"
          ];
      Value arg = [
        "url"   => createAuthedUrl(mmsUrl),
        "params"=> params
          ];
      call(shell, "mms", "post", arg, mmsok, mmsnok);
    }

    void mmsok(Object state, Value ret)
    {
      alertError(@InfoUpdateSuc);
      rawFetchAndRefresh(new List().add(FacilityUser).add(FacilityFri));
    }

    void mmsnok(Object state, String error)
    {
      alertError(@InfoUpdateFail +error);
    }

    return shell;
  }

  Shell createHelpView(String topic) {
    Flow view = new Flow(getStyle("default"));
    view.setPreferredSize(-100, -100);
    view.add(createHeaderText(@TitleAbout));
    view.add(createSubHeaderText (@InfoHelpCenter));

    if (topic.equals(FacilityBlog)) {
      view.add(createBodyText("::" +@TimelineBlog));
      view.add(createBodyText(@HelpTimelineBlog));
    } else {
      if (topic.equals("main")) {
        view.add(createBodyText("::" +@InfoHelpCenter));
        view.add(createBodyText(@HelpMain));
        view.add(createBodyText(@HelpFuncSetting));
      } else if (topic.equals(FacilityPub)) {
        view.add(createBodyText("::" +@TimelinePub));
        view.add(createBodyText(@HelpTimelinePublic));
        view.add(createBodyText(@HelpFuncReply));
      } else if (topic.equals(FacilityUser)) {
        view.add(createBodyText("::" +@TimelineUser));
        view.add(createBodyText(@HelpTimelineUser));
      } else if (topic.equals(FacilityFri)) {
        view.add(createBodyText("::" +@TimelineFri));
        view.add(createBodyText(@HelpTimelineFriends));
        view.add(createBodyText(@HelpFuncReply));
      } else if (topic.equals(FacilityDr)) {
        view.add(createBodyText("::" +@TimelineDr));
        view.add(createBodyText(@HelpTimelineDr));
        view.add(createBodyText(@HelpFuncMessage));
      } else if (topic.equals(FacilityFriends)) {
        view.add(createBodyText("::" +@ListFriends));
        view.add(createBodyText(@HelpListFriends));
        view.add(createBodyText(@HelpFuncReply));
      } else if (topic.equals(FacilityFeatures)) {
        view.add(createBodyText("::" +@ListFeatures));
        view.add(createBodyText(@HelpListFeatures));
        view.add(createBodyText(@HelpFuncFollow));
        view.add(createBodyText(@HelpFuncUnFollow));
      }
      view.add(createBodyText(@HelpFuncUpdate));
      view.add(createBodyText(@HelpFuncReload));
      view.add(createBodyText(@HelpFuncReadall));
      view.add(createBodyText(@HelpFuncCapture));
      view.add(createBodyText(@HelpFuncLingo));
    }

    return getViewShell(view);
  }

  Shell createTimelineView(String facility, String title) {
    createTimelineViewMenu();
    Flow content = new Flow(getStyle("default"));
    content.setPreferredSize(-100, -100);
    
    final Input updateInput = new Input(getStyle("default"), @HintUpdate, "", ANY);
    content.add(updateInput);
    content.add(createHeaderText(title));

    Flow lowerFlow = new Flow(getStyle("default"));
    lowerFlow.setPreferredSize(-100, 0);

    Text updateText = null;
    if (anonymousMode) {
      updateText = createUpdateText(@CmdLogin);
      updateText.setAction(CMD_LOGIN);
    } else {
      updateText = createUpdateText(@CmdUpdate);
      updateText.setAction(CMD_UPDATE);
    }
    lowerFlow.add(updateText);
    
    tobeFocused = null;
    foreach (Value status : timelineList[facility])
    {
      Flow itemFlow = new Flow(getStyle("list.bg"));
      itemFlow.setFlags(VISIBLE|FOCUSABLE|LINEFEED);
      itemFlow.setPreferredWidth(-100);
      itemFlow.setData(status);
      itemFlow.setAction(CMD_SHOW);

      {
        Flow textFlow = new Flow(getStyle("default"));
        textFlow.setPreferredWidth(-100);
        textFlow.setFlags(VISIBLE);

        final Style labelStyle = (String(status.viewed).equals(STATUS_UNVIEWED))
          ? getStyle("list.unread")
          : getStyle("list.read");

        String labelText = "";
        if (facility.equals(FacilityFriends) || facility.equals(FacilityFeatures)) {
          if (String(status.content.val).trim().equals("")) {
            labelText = " - " + @NotEverJiWai;
          } else {
            labelText = " - " + status.content.val;
          }
        }

        Label name = new Label(labelStyle, status.title + labelText);
        name.setPreferredWidth(-100);
        name.setFlags(VISIBLE|LINEFEED);
        textFlow.add(name);
        itemFlow.add(textFlow);

        if (status.iid.equals(lastFocused.status)) {
          tobeFocused = itemFlow;
        }
      }
      
      lowerFlow.add(itemFlow);
    }
    content.add(lowerFlow);

    final Shell shell = new Shell(content);
    shell.setStyle(getStyle("maxi"));
    shell.setFocused(tobeFocused);
    shell.setKeyHandler(myKeyHandler);
    shell.setSoftKeyHandler(mySoftKeyHandler);
    shell.setActionHandler(myActionHandler);

    boolean myKeyHandler(Component source, int op, int code)
    {
      if (code == '*') {
        tempShell = shell;
        if (anonymousMode) {
          Value arg = [
            "ts"  => 0,
            "max" => STATUS_COUNTS,
            "refresh" => true
          ];
          call(FacilityPub, FacilityPub, "getItems", arg, wanderok, wandernok);
        } else {
          fetchAndRefresh(new List().add(facility));
        }
      } else if (code == '#') {
        doReadall(facility);
        animatePopShell(shell);
        animatePushShell(createTimelineView(facility, title));
      } else if (code == '0') {
        updateInput.edit(doUpdateStatus);
      } else if (code == '9') {
        if (hasCamera) {
          animatePushShell(createCaptureView());
        } else {
          alertError(@InfoNoCamera);
        }
      } else if (code == '7') {
        animatePushShell(createConsoleView());
      } else if (code == '1') {
        animatePushShell(createHelpView(facility));
      } else if (code == '3') {
        animatePushShell(createSettingView());
      }

      return false;
    }

    MenuItem mySoftKeyHandler(final Shell shell, final Component focused, final int key)
    {
      if (key == SOFTKEY_BACK) {
        return MenuBack;
      } else if (key == SOFTKEY_OK) {
        return MenuOptions;
      }
      return null;
    }
    
    void myActionHandler(final Shell shell, final Component source, final int action) 
    {
      if (action == CMD_BACK) {
        animatePopShell(shell);
        if (!anonymousMode) {
          animatePushShell(createTimelineList());
        }
      } else if (action == CMD_SHOW) {
        animatePopShell(shell);
        Value status = Value(source.getData());
        status.viewed = [];
        lastFocused.status = status.iid;
        animatePushShell(createTimelineView(facility, title));
        animatePushShell(createStatusView(status, facility));
      } else if (action == CMD_RELOAD) {
        tempShell = shell;
        if (anonymousMode) {
          Value arg = [
            "ts"  => 0,
            "max" => STATUS_COUNTS,
            "refresh" => true
          ];
          call(FacilityPub, FacilityPub, "getItems", arg, wanderok, wandernok);
        } else {
          fetchAndRefresh(new List().add(facility));
        }
      } else if (action == CMD_HELP) {
        animatePushShell(createHelpView(facility));
      } else if (action == CMD_UPDATE) {
        updateInput.edit(doUpdateStatus);
      } else if (action == CMD_READALL) {
        doReadall(facility);
        animatePopShell(shell);
        animatePushShell(createTimelineView(facility, title));
      } else if (action == CMD_LOGIN) {
        animatePopShell(shell);
      } else if (action == CMD_CAPTURE) {
        if (hasCamera) {
          animatePushShell(createCaptureView());
        } else {
          alertError(@InfoNoCamera);
        }
      }
    }

    return shell;
  }

  Shell createStatusView(Value status, String facility)
  {
    Flow view = new Flow(getStyle("default"));
    view.setPreferredSize(-100, -100);

    String created = status.created;
    if (facility.equals(FacilityPub)
    || facility.equals(FacilityUser)
    || facility.equals(FacilityFri)
    || facility.equals(FacilityDr)
    || facility.equals(FacilityBlog)
    ) {
        final Calendar cal = new Calendar();
        cal.setMillis(status.created);
        created = cal.format(FORMAT_DATETIME);
    }

    String inputTitle = (String(status.author).equals(username))
      ? @HintUpdate 
      : (facility.equals(FacilityUser) || facility.equals(FacilityFriends))
        ? @HintUpdate
        : (facility.equals(FacilityDr))
          ? @HintDrmsg
          : @HintReply;
    final Input replyInput = new Input(getStyle("default"), inputTitle, "", ANY);
    view.add(replyInput);
    
    view.add(createHeaderText(""));
    view.add(createSubHeaderText(created));
    if (facility.equals(FacilityDr) || facility.equals(FacilityBlog)) {
      view.add(createBodyText(status.title));
      view.add(createBodyText(status.content.val));
    } else if (facility.equals(FacilityFriends) || facility.equals(FacilityFeatures)) {
      view.add(createBodyText(status.title));
      view.add(createBodyText(status.content.val));
    } else {
      view.add(createBodyText(status.title));
    }

    if (tortoiseMode && !facility.equals(FacilityBlog)) {
      if (isMmsCapable(facility)) {
        String statusId = fetchStatusId(status.link);
        if (null != statusId && statusId.length() > 0) {
          call(null, "avatarByStatus" , "get",
              ["url" => createAuthedUrl("api.jiwai.de/statuses/show/" + statusId + ".xml")],
              picok, picnok);
        }
      } else {
        call(null, "avatarByUser" , "get",
            ["url" => createAuthedUrl("api.jiwai.de/users/show/" + status.author + ".xml")],
            picoklite, picnok);
      }
    }

    boolean isMmsCapable(String f) {
      if (f.equals(FacilityPub)
          || f.equals(FacilityUser)
          || f.equals(FacilityFri)) {
        return true;
      }
      return false;
    }

    String fetchStatusId(String guid) {
      if (guid.length() == 0) return null;
      int endIndex = guid.length();
      int beginIndex = guid.lastIndexOf('/', endIndex); 
      return (beginIndex >0 && endIndex > beginIndex) 
        ? guid.substring(beginIndex + 1, endIndex)
        : null;
    }

    void picoklite(Object state, Value ret) {
      Picture pict = getPicture(String(ret));
      Flow pictFlow = new Flow(getStyle("avatar"));
      pictFlow.setFlags(VISIBLE|LINEFEED);
      pictFlow.add(pict);
      view.insert(3, pictFlow);
      shell.repaint(true);
    }

    void picok(Object state, Value ret) {
      Picture pict = getPicture(String(ret.avatar));
      Flow pictFlow = new Flow(getStyle("avatar"));
      pictFlow.setFlags(VISIBLE|LINEFEED);
      pictFlow.add(pict);
      view.insert(3, pictFlow);
      shell.repaint(true);

      if (ret.mms.size() > 0) {
        Picture mms = getPicture(String(ret.mms));
        Flow mmsFlow = new Flow(getStyle("avatar"));
        mmsFlow.setFlags(VISIBLE|LINEFEED);
        mmsFlow.add(mms);
        view.add(mmsFlow);
      }
    }

    void picnok(Object state, String error) {
      alertError(error);
    }

    final Shell shell = new Shell(view);
    shell.setStyle(getStyle("maxi"));
    shell.setKeyHandler(myKeyHandler);
    shell.setSoftKeyHandler(mySoftKeyHandler);
    shell.setActionHandler(myActionHandler);

    boolean myKeyHandler(Component source, int op, int code)
    {
      if (code == '9') {
        if (hasCamera) {
          animatePushShell(createCaptureView());
        } else {
          alertError(@InfoNoCamera);
        }
      } else if (code == '7') {
        animatePushShell(createConsoleView());
      }

      return false;
    }

    MenuItem mySoftKeyHandler(final Shell shell, final Component focused, final int key)
    {
      if (key == SOFTKEY_BACK) {
        return MenuBack;
      } else if (anonymousMode) {
        return null;
      } else if (key == SOFTKEY_OK) {
        if (String(status.author).equals(username)) {
          return MenuUpdate;
        } else if (facility.equals(FacilityPub)) {
          return MenuReply;
        } else if (facility.equals(FacilityUser)) {
          return MenuUpdate;
        } else if (facility.equals(FacilityFri)) {
          return MenuReply;
        } else if (facility.equals(FacilityDr)) {
          return MenuDrmsg;
        } else if (facility.equals(FacilityFriends)) {
          return MenuReply;
        } else if (facility.equals(FacilityFeatures)) {
          return (isFollowed(status.iid)) ? MenuUnFollow : MenuFollow;
        }
      }
      return null;
    }
  
    void myActionHandler(final Shell shell, final Component source, final int action) 
    {
      if (action == CMD_BACK) {
        animatePopShell(shell);
      } else if (action == CMD_REPLY) {
        replyInput.setText("@" + status.author + " ");
        replyInput.edit(doReplyStatus);
      } else if (action == CMD_UPDATE) {
        replyInput.edit(doUpdateStatus);
      } else if (action == CMD_DRMSG) {
        replyInput.setData(status.author);
        replyInput.edit(doDrStatus);
      } else if (action == CMD_FOLLOW) {
        // Follow
        call(null, "follow" , "get",
            ["url" => createAuthedUrl("api.jiwai.de/friendships/create/" + status.author + ".json")],
            followok, follownok);
      } else if (action == CMD_UNFOLLOW) {
        // Un-Follow
        call(null, "unfollow" , "get",
            ["url" => createAuthedUrl("api.jiwai.de/friendships/destroy/" + status.author + ".json")],
            followok, follownok);
      }
    }

    void followok(Object state, Value ret) {
      alertError(@InfoUpdateSuc);
    }

    void follownok(Object state, String error) {
      alertError(error);
    }

    return shell;
  }
    
  Shell createSettingView()
  {
    Flow view = new Flow(getStyle("default"));
    view.setPreferredSize(-100, -100);

    view.add(createHeaderText(""));

    view.add(createSubHeaderText(@InfoTortoise));
    Choice choiceTortoise = createFormChoice(tortoiseMode);
    view.add(choiceTortoise);

/*
    Choice choiceCamera = createFormChoice(cameraHighMode);
    if (hasCamera) {
      view.add(createSubHeaderText(@InfoHighCamera));
      view.add(choiceCamera);
    }
*/

    final Shell shell = new Shell(view);
    shell.setStyle(getStyle("maxi"));
    shell.setSoftKeyHandler(mySoftKeyHandler);
    shell.setActionHandler(myActionHandler);

    MenuItem mySoftKeyHandler(final Shell shell, final Component focused, final int key)
    {
      if (key == SOFTKEY_BACK) {
        return MenuCancel;
      } else if (key == SOFTKEY_OK) {
        return MenuSave;
      }
      return null;
    }
  
    void myActionHandler(final Shell shell, final Component source, final int action) 
    {
      Store store = getStore();
      if (action == CMD_SAVE) {
        if (0 == choiceTortoise.getSelected()) {
          // Enable
          tortoiseMode = true;
          store.put(storeTortoise, "Y");
        } else {
          tortoiseMode = false;
          store.put(storeTortoise, "N");
        }

/*
        if (hasCamera) {
          if (0 == choiceCamera.getSelected()) {
            // Enable
            cameraHighMode = true;
            store.put(storeCamera, "Y");
          } else {
            cameraHighMode = false;
            store.put(storeCamera, "N");
          }
        }
*/
        animatePopShell(shell);
      } else if (action == CMD_CANCEL) {
        animatePopShell(shell);
      }
    }
    return shell;
  }

  Shell createRegisterView ()
  {
    String rUsername = "";
    String rPassword = "";
    String rEmail = "";

    Flow view = new Flow(getStyle("default"));
    view.setPreferredSize(-100, -100);

    view.add(createHeaderText(""));

    view.add(createFormLabel(@InfoUsername));
    Input inputUsername = new Input(getStyle("form.input"), @InfoUsername, rUsername, ANY);
    inputUsername.setFlags(VISIBLE|FOCUSABLE|LINEFEED);
    inputUsername.setPreferredWidth(-100);
    view.add(inputUsername);

    view.add(createFormLabel(@InfoPassword));
    Input inputPassword = new Input(getStyle("form.input"), @InfoPassword, rPassword, ANY|PASSWORD);
    inputPassword.setFlags(VISIBLE|FOCUSABLE|PASSWORD|LINEFEED);
    inputPassword.setPreferredWidth(-100);
    view.add(inputPassword);

    view.add(createFormLabel(@InfoEmail));
    Input inputEmail = new Input(getStyle("form.input2"), @InfoEmail, rEmail, ANY);
    inputEmail.setFlags(VISIBLE|FOCUSABLE|LINEFEED);
    inputEmail.setPreferredWidth(-100);
    view.add(inputEmail);

    final Shell shell = new Shell(view);
    shell.setStyle(getStyle("maxi"));
    shell.setSoftKeyHandler(mySoftKeyHandler);
    shell.setActionHandler(myActionHandler);

    MenuItem mySoftKeyHandler(final Shell shell, final Component focused, final int key)
    {
      if (key == SOFTKEY_BACK) {
        return MenuBack;
      } else if (key == SOFTKEY_OK) {
          return MenuRegister;
      }
      return null;
    }
  
    void myActionHandler(final Shell shell, final Component source, final int action) 
    {
      Store store = getStore();
      if (action == CMD_BACK) {
        animatePopShell(shell);
        animatePushShell(createLoginForm());
      } else if (action == CMD_REGISTER) {
        rUsername = inputUsername.getText();
        rPassword = inputPassword.getText();
        rEmail = inputEmail.getText();
        final Value params = [
          "name_screen"=> rUsername,
          "email" => rEmail,
          "pass"  => rPassword,
          "apikey"=> signupKey
            ];
        Value arg = [
          "url"   => signupUrl,
          "params"=> params
            ];
            printf(">arg: " + arg);
        call(shell, "register", "post", arg, regok, regnok);
      }
    }

    void regok(Object state, Value ret) {
      Store store = getStore();
      store.put(storeUsername, rUsername);
      store.put(storePassword, rPassword);
      username = rUsername;
      password = rPassword;
      alertError(@InfoRegisterSuc);
      animatePopShell(Shell(state));
      animatePushShell(createLoginForm());
    }

    void regnok(Object state, String error) {
      alertError(@InfoRegisterFail);
    }
    return shell;
  }

  Shell createLoginForm() {
    createPreLoginMenu();
    Flow loginForm = new Flow(getStyle("default"));
    loginForm.setPreferredSize(-100, -100);
    
    loginForm.add(createHeaderText(@TitleLogin));

    Label labelUsername = createFormLabel(@InfoUsername);
    loginForm.add(labelUsername);
    
    Input inputUsername = new Input(getStyle("form.input"), @InfoUsername,  username, ANY);
    inputUsername.setFlags(VISIBLE|FOCUSABLE|LINEFEED);
    inputUsername.setPreferredWidth(-100);
    loginForm.add(inputUsername);

    Label labelPassword = createFormLabel(@InfoPassword);
    loginForm.add(labelPassword);

    Input inputPassword = new Input(getStyle("form.input"), @InfoPassword, password, ANY|PASSWORD);
    inputPassword.setFlags(VISIBLE|FOCUSABLE|LINEFEED|PASSWORD|ANY);
    inputPassword.setPreferredWidth(-100);
    loginForm.add(inputPassword);
  
    Label labelWander = new Label(getStyle("form.linkHead"), @InfoWander);
    labelWander.setFlags(VISIBLE|FOCUSABLE|LINEFEED);
    labelWander.setPreferredWidth(-100);
    labelWander.setAction(CMD_WANDER);
    loginForm.add(labelWander);

    Label labelBlog = new Label(getStyle("form.link"), @TimelineBlog);
    labelBlog.setFlags(VISIBLE|FOCUSABLE|LINEFEED);
    labelBlog.setPreferredWidth(-100);
    labelBlog.setAction(CMD_BLOG);
    loginForm.add(labelBlog);

    Label labelRegister = new Label(getStyle("form.linkTail"), @InfoRegister);
    labelRegister.setFlags(VISIBLE|FOCUSABLE|LINEFEED);
    labelRegister.setPreferredWidth(-100);
    labelRegister.setAction(CMD_REGISTER);
    loginForm.add(labelRegister);

    loginForm.add(createFormStatic(@InfoJiWai));
    loginForm.add(createFormStatic(@InfoJiWai1));
    loginForm.add(createFormStatic(@InfoJiWai2));
    loginForm.add(createFormStatic(@InfoJiWai3));
    loginForm.add(createFormStatic(@InfoJiWai4));
    
    final Shell shell = new Shell(loginForm);
    shell.setStyle(getStyle("maxi"));

    shell.setSoftKeyHandler(mySoftKeyHandler);
    shell.setActionHandler(myActionHandler);

    MenuItem mySoftKeyHandler(final Shell shell, final Component focused, final int key) 
    {
      if (key == SOFTKEY_BACK) {
        return MenuBack;
      } if (key == SOFTKEY_OK) {
        return MenuLogin;
      }
      return null;
    }

    void myActionHandler(final Shell shell, final Component source, final int action) 
    {
      if (action == CMD_BACK) {
        animatePopShell(shell);
      } else if (action == CMD_LOGIN) {
        anonymousMode = false;
        username = inputUsername.getText();
        password = inputPassword.getText();
        Value arg = [ "url"   => createAuthedUrl(loginUrl) ];
        call(null, "login", "get", arg, authok, authnok);
        tempShell = shell;
      } else if (action == CMD_WANDER) {
        Value arg = [
          "ts"  => 0,
          "max" => STATUS_COUNTS,
          "refresh" => true
        ];
        call(FacilityPub, FacilityPub, "getItems", arg, wanderok, wandernok);
      } else if (action == CMD_BLOG) {
        Value arg = [
          "ts"  => 0,
          "max" => STATUS_COUNTS,
          "refresh" => false
        ];
        call(FacilityBlog, FacilityBlog, "getItems", arg, blogok, blognok);
      } else if (action == CMD_REGISTER) {
        animatePushShell(createRegisterView());
        animatePopShell(shell);
      }
    }

    return shell;
  }

// END createViews

// BEGIN fetchMethods

  void fetchTimeline(String facility, boolean refresh)
  {
    Value arg = [
      "ts"  => 0,
      "max" => STATUS_COUNTS,
      "refresh" => refresh
    ];
    call(facility, facility, "getItems", arg, fetchok, fetchnok);
  }

  void fetchList(String facility)
  {
    Value arg = ["url" => createAuthedUrl("api.jiwai.de/statuses/" + facility + ".xml")];
    call(facility, facility, "get", arg, fetchok, fetchnok);
  }

  void rawFetchTimeline(String facility)
  {
    Value arg = [
      "ts"  => 0,
      "max" => STATUS_COUNTS,
      "refresh" => true
    ];
    call(facility, facility, "getItems", arg, rawfetchok, null);
  }

  void doReadall(String facility)
  {
    timelineViewed[facility].viewed = []; 
    foreach (Value item: timelineList[facility]) {
      item.viewed = [];
    }
  }

  void doUpdateStatus(final Shell shell, final Component source, final int action) 
  {
    if (action == ITEM_CANCEL) { return; }
    Input updateInput = Input(source);
    final Value params = [
      "status"=> updateInput.getText(),
      "idPartner"=> "10038"
    ];
    Value arg = [
      "url"   => createAuthedUrl(updateUrl),
      "params"=> params
    ];
    call(shell, "update", "post", arg, updateok, updatenok);
  }

  void doReplyStatus(final Shell shell, final Component source, final int action) 
  {
    String replyTo = String(source.getData());
    if (action == ITEM_CANCEL) { return; }
    Input replyInput = Input(source);
    final Value params = [
      "status"=> replyInput.getText(),
      "idPartner"=> "10038"
    ];
    Value arg = [
      "url"   => createAuthedUrl(updateUrl),
      "params"=> params
    ];
    call(shell, "update", "post", arg, updateok, updatenok);
  }

  void doDrStatus(final Shell shell, final Component source, final int action) 
  {
    String replyTo = String(source.getData());
    if (action == ITEM_CANCEL) { return; }
    Input updateInput = Input(source);
    final Value params = [
      "user"  => replyTo,
      "text"  => updateInput.getText(),
      "idPartner"=> "10038"
    ];
    Value arg = [
      "url"   => createAuthedUrl(drmsgUrl),
      "params"=> params
    ];
    call(shell, "update", "post", arg, drok, drnok);
  }

// END fetchMethods

// BEGIN callBacks

  void fetchok(Object state, Value ret)
  {
    createValueFromTimeline(state, ret);
    timelineViewed[state] = STATUS_UNVIEWED;

    if (++progressCurrent == progressTotal) {
      closePrompt();
      popShell(tempShell);
      timelineListShell = createTimelineList();
      pushShell(timelineListShell);
      tempShell = timelineListShell;
    }
  }

  void fetchnok(Object state, String error)
  {
    if (++progressCurrent == progressTotal) {
      closePrompt();
      popShell(tempShell);
      timelineListShell = createTimelineList();
      pushShell(timelineListShell);
      tempShell = timelineListShell;
    }
    alertError(@InfoSyndFail + ": "+error);
  }

  void rawfetchok(Object state, Value ret)
  {
    createValueFromTimeline(state, ret);
  }

  void wanderok(Object state, Value ret)
  {
    createValueFromTimeline(state, ret);
    timelineViewed[state] = STATUS_UNVIEWED;
    popShell(tempShell);
    pushShell(createTimelineView(FacilityPub, FacilityPub));
  }

  void wandernok(Object state, String error)
  {
    alertError(@InfoSyndFail + ": "+error);
  }

  void blogok(Object state, Value ret)
  {
    createValueFromTimeline(state, ret);
    timelineViewed[state] = STATUS_UNVIEWED;
    popShell(tempShell);
    pushShell(createTimelineView(FacilityBlog, FacilityBlog));
  }

  void blognok(Object state, String error)
  {
    alertError(@InfoSyndFail + ": "+error);
  }

  void logoutok(Object state, Value ret)
  {
    animatePopShell(tempShell);
    animatePopShell(Shell(state));
    Store store = getStore();
    store.remove(storeUsername);
    store.remove(storePassword);
    anonymousMode = true;
    initValue();
    animatePushShell(createLoginForm());
  }

  void logoutnok(Object state, String error)
  {
    alertError(@InfoLogoutFail + ": "+error);
  }

  void initok(Object state, Value ret)
  {
    animatePushShell(createTimelineList());
  }

  void initnok(Object state, String error)
  {
    animatePushShell(createLoginForm());
  }

  void authok(Object state, Value ret)
  {
    anonymousMode = false;
    Store store = getStore();
    store.put(storeUsername, Value(username));
    store.put(storePassword, Value(password));
    setAuthedParameters();
    initValue();
    bulkFetch();
  }

  void authnok(Object state, String error)
  {
    anonymousMode = true;
    Store store = getStore();
    store.remove(storeUsername);
    store.remove(storePassword);
    alertError(@InfoAuthFail + ": " +error);
  }

  void updateok(Object state, Value ret)
  {
    alertError(@InfoUpdateSuc);
    animatePopShell(Shell(state));
    rawFetchAndRefresh(new List().add(FacilityUser).add(FacilityFri));
  }

  void updatenok(Object state, String error)
  {
    alertError(@InfoUpdateFail +error);
  }

  void drok(Object state, Value ret)
  {
    alertError(@InfoUpdateSuc);
    animatePopShell(Shell(state));
  }

  void drnok(Object state, String error)
  {
    alertError(@InfoUpdateFail +error);
  }

// END callBacks

// BEGIN handies
  void closePrompt()
  {
    if (prompt != null) {
      prompt.pop();
      prompt = null;
    }
  }

  void animatePushShell(Shell foo)
  {
    if (null == foo) return;
    //int w, int h = getScreenSize();
    //slideIn(w, 0, w, h, foo);
    pushShell(foo);
  }

  void animatePopShell(Shell foo)
  {
    if (null == foo) return;
    //int w, int h = getScreenSize();
    //slideOut(-w, 0, w, h, foo);
    popShell(foo);
  }

  void bulkFetch() {
    progressTotal = 7;
    progressCurrent = 0;
    pushExclusiveView(@InfoInUpdating);
    fetchTimeline(FacilityPub,  true);
    fetchTimeline(FacilityUser, true);
    fetchTimeline(FacilityFri,  true);
    fetchTimeline(FacilityDr,   true);
    fetchTimeline(FacilityBlog, false);
    fetchList(FacilityFriends);
    fetchList(FacilityFeatures);
  }

  void fetchOnce(String facility) {
    progressTotal = 1;
    progressCurrent = 0;
    pushExclusiveView(@InfoInUpdating);
    fetchTimeline(facility, true);
  }

  void fetchAndRefresh(List facilities) {
    progressTotal = facilities.size();
    progressCurrent = 0;
    pushExclusiveView(@InfoInUpdating);
    foreach (String facility : facilities) {
      if (facility.equals(FacilityFriends) || facility.equals(FacilityFeatures)) {
        fetchList(facility);
      } else {
        fetchTimeline(facility, true);
      }
    }
  }

  void rawFetchAndRefresh(List facilities) {
    foreach (String facility : facilities) {
      rawFetchTimeline(facility);
    }
  }

  void bulkReadall() {
    doReadall(FacilityBlog);
    doReadall(FacilityPub);
    doReadall(FacilityUser);
    doReadall(FacilityFri);
    doReadall(FacilityDr);
    doReadall(FacilityFriends);
    doReadall(FacilityFeatures);
  }

  Label createFormStatic(String name)
  {
    Label retLabel = new Label(getStyle("text.label"), name);
    retLabel.setFlags(VISIBLE|LINEFEED);
    retLabel.setPreferredWidth(-100);
    return retLabel;
  }

  Label createFormLabel(String name)
  {
    Label retLabel = new Label(getStyle("form.label"), name);
    retLabel.setFlags(VISIBLE|LINEFEED);
    retLabel.setPreferredWidth(-100);
    return retLabel;
  }

  Label createChoiceLabel(String name)
  {
    Label retLabel = new Label(getStyle("form.choice.item"), name);
    retLabel.setFlags(VISIBLE|LINEFEED|FOCUSABLE);
    retLabel.setPreferredWidth(-100);
    return retLabel;
  }

  Choice createFormChoice(boolean selected)
  {
    Choice retChoice = new Choice(getStyle("form.choice.display"), getStyle("form.choice.list"));
    List choices = new List();
    choices.add(createChoiceLabel(@ChoiceEnabled));
    choices.add(createChoiceLabel(@ChoiceDisabled));
    retChoice.setChoices(choices, 1);

    if (selected) {retChoice.setSelected(0);}

    retChoice.setFlags(VISIBLE|FOCUSABLE|LINEFEED);
    retChoice.setPreferredWidth(-100);
    return retChoice;
  }

  Text createHeaderText(String name)
  {
    Text text = new Text(getStyle("header"), "");
    text.setPreferredWidth(-100);
    text.setFlags(VISIBLE|LINEFEED);
    return text;
  }

  Text createSubHeaderText(String st)
  {
    Text text = new Text(getStyle("text.subheader"), st);
    text.setPreferredWidth(-100);
    text.setFlags(VISIBLE|LINEFEED);
    return text;
  }

  Text createUpdateText(String name)
  {
    Text text = new Text(getStyle("timeline.update"), name);
    text.setPreferredWidth(-100);
    text.setFlags(VISIBLE|LINEFEED|FOCUSABLE);
    return text;
  }

  Text createBodyText(String st)
  {
      Text text = new Text(getStyle("text.body"), st);
      text.setPreferredWidth(-100);
      text.setFlags(VISIBLE|LINEFEED);
      return text;
  }

  void createValueFromTimeline(String facility, Value ret)
  {
    Value tempList = timelineList[facility].copy();
    Value tobeInsert = [];
    timelineList[facility] = [];
    boolean fFresh = true;

    foreach (Value item : ret) {
    //FIXME O(N) -> O(1)
      foreach (Value temp : tempList) {
        if (temp.iid.equals(item.iid)) {
          fFresh = String(temp.viewed).equals(STATUS_UNVIEWED);
        }
      }
      tobeInsert = [
        "iid"     => item.iid,
        "title"   => item.title,
        "link"    => item.link,
        "created" => item.created,
        "author"  => item.author,
        "content" => item.content,
        "viewed"  => (fFresh) ? STATUS_UNVIEWED : STATUS_VIEWED
      ];
      timelineList[facility].add(tobeInsert);
    }
  }

  boolean isFollowed(String id)
  {
    foreach (Value item: timelineList[FacilityFriends]) {
      if (String(item.iid).equals(id)) {
        return true;
      }
    }
    return false;
  }

  int getUnviewedSize(String facility)
  {
    int unviewed = 0;
    foreach (Value item: timelineList[facility]) {
      if (String(item.viewed).equals(STATUS_UNVIEWED)) {
        ++unviewed;
      }
    }
    return unviewed;
  }

  int getAllUnviewedSize()
  {
    int unviewed = 0;
    unviewed += getUnviewedSize(FacilityPub);
    unviewed += getUnviewedSize(FacilityUser);
    unviewed += getUnviewedSize(FacilityFri);
    unviewed += getUnviewedSize(FacilityDr);
    unviewed += getUnviewedSize(FacilityFriends);
    return unviewed;
  }

  Shell getViewShell(Component content)
  {
    final Shell shell = new Shell(content);
    shell.setStyle(getStyle("maxi"));
    shell.setSoftKeyHandler(defaultSoftKeyHandler);
    shell.setActionHandler(defaultActionHandler);

    return shell;
  }

  MenuItem defaultSoftKeyHandler(final Shell shell, final Component focused, final int key) 
  {
    if (key == SOFTKEY_BACK) {
      return MenuBack;
    }
    return null;
  }

  MenuItem nilSoftKeyHandler(final Shell shell, final Component focused, final int key) 
  {
    if (key == SOFTKEY_BACK) {
      return MenuBack;
    }
    return null;
  }

  void defaultActionHandler(final Shell shell, final Component source, final int action) 
  {
    if (action == CMD_BACK) {
      animatePopShell(shell);
    }
  }
    
  void alertError(String error)
  {
    setBubble(null, error);
  }

  String createAuthedUrl(String raw) {
    String retUrl = "";
    if (anonymousMode) {
      retUrl = "http://" + raw;
    } else {
      retUrl = "http://"
        + encodeURL(username)
        + ":"
        + password
        + "@"
        + raw;
    }
    return retUrl;
  }

  void setAuthedParameters() {
    setParameters( [ 
      "username"    => username,
      "password"    => password
    ] );
  }
  
// END handies
  
// BEGIN WidSets Interface

  MenuItem getSoftKey(Shell shell, Component focused, int key)
  {
    if (key == SOFTKEY_OK) {
      return MenuOptions;
    } else if (key == SOFTKEY_BACK) {
      return MenuBack;
    }
    return null;
  }
  
  Menu getMenu(Shell shell, Component source)
  {
      return MENU;
  }

  void startWidget()
  {
    if (getAllUnviewedSize() > 0) {
      setMinimizedView(createMinimizedView("unviewMini", getStyle("default")));
    } else {
      setMinimizedView(createMinimizedView("viewMini", getStyle("default")));
    }
  }

  Shell openWidget()
  {
    createPreLoginMenu();
    Store store = getStore();
    tortoiseMode = store.has(storeTortoise)
      ? String(store.getValue(storeTortoise)).equals("Y")
      ? true
      : false
      : true;
    username = store.has(storeUsername)? String(store.getValue(storeUsername)) : "";
    password = store.has(storePassword)? String(store.getValue(storePassword)) : "";

    camera = new Camera(getStyle("mini"));
    if (camera.isAvailable()) {
      hasCamera = true;
      camera.close();
    }
    camera = null;

    Value arg = [ "url"   => createAuthedUrl(loginUrl) ];
    call(null, "login", "get", arg, initok, initnok);

    return null;
  }

  void closeWidget()
  {
    if (!anonymousMode) {
      Store store = getStore();
      store.put(FacilityPub,  timelineList[FacilityPub]);
      store.put(FacilityUser, timelineList[FacilityUser]);
      store.put(FacilityFri,  timelineList[FacilityFri]);
      store.put(FacilityDr,   timelineList[FacilityDr]);
    }
    if (camera != null) {
      camera.close();
      camera = null;
    }
  }

// END WidSets Interface

} //class

// vim:tabstop=2:shiftwidth=2:expandtab
